/*
 * MIT License
 *
 * Copyright (c) 2019 Vincenzo Palazzo vincenzopalazzodev@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <gtest/gtest.h>
#include <utility>
#include <rapidjson/ostreamwrapper.h>
#include <rapidjson/writer.h>

#include "../src/structure/block/block.h"
#include "../src/persistence/DAOException.h"
#include "../src/core/ConfiguratorSingleton.h"

using namespace std;
using namespace spyCBlock;

/**
 * This battery of tests was developed to solve
 * the exception generated by the bitcoin core library when
 * I go to pareserize the blk files> = 976
 *
 * The exception is
 * unknown file: Failure
 * C++ exception with description
 * "ReadCompactSize(): size too large: iostream error" thrown in the test body.
 *
 * The alpha version of this project reports a big problem in memory allocation and therefore this leads to a
 * subsequent rewrite of the way in which data structures are used and how memory is allocated,
 * so as to decrease the workload on processor and RAM
 *
 * This test suit init the support to Seregrated Witness transaction tipe
 *
 * @author https://github.com/vincenzopalazzo
 */

//Test for the first file blk that generated exception
TEST(ExceptionGenerateCompactSizeTest, test_exception_compactsize_file_blk976)
{
    string pathMockRoot = ConfiguratorSingleton::getInstance().getPathFileMockTest() + "/";
    string pathLogRoot = ConfiguratorSingleton::getInstance().getPathFileLog() + "/";

    FLAGS_minloglevel = 2;
    FLAGS_logtostderr = false;
    google::SetLogDestination(google::GLOG_INFO, pathLogRoot.append("test_exception_compactsize_file_blk976.log").c_str());

    string path = pathMockRoot +  "bitcoin/block/bug/blk976/blk00976.dat";
    ifstream stream{path};

    vector<Block> blocks;
    while(stream.is_open() && !stream.eof()) {

        blocks.emplace_back(Block{});
        Block& block = blocks.back();
        block.decode(stream);
    }

    stream.close();
    EXPECT_TRUE(blocks.size() > 120);

    string pathOut = pathMockRoot + "bitcoin/block/bug/blk976/blk00976.json";
    ofstream streamOut(pathOut);

    if(streamOut.is_open()){

        rapidjson::OStreamWrapper wrapper(streamOut);
        rapidjson::Writer<rapidjson::OStreamWrapper> writer (wrapper);

        writer.StartObject();
        writer.Key("blocks");
        writer.StartArray();
        for(Block b : blocks)
        {
          b.toJson(writer);
        }
        writer.EndArray();
        writer.EndObject();
      streamOut.close();
    }
}

//Test for the last file blk that generated exception
TEST(ExceptionGenerateCompactSizeTest, test_exception_compactsize_file_blk975)
{
    string pathMockRoot = ConfiguratorSingleton::getInstance().getPathFileMockTest() + "/";
    string pathLogRoot = ConfiguratorSingleton::getInstance().getPathFileLog() + "/";
    FLAGS_minloglevel = 2;
    FLAGS_logtostderr = false;
    google::SetLogDestination(google::GLOG_FATAL, pathLogRoot.append("test_exception_compactsize_file_blk975.log").c_str());

    string path = pathMockRoot +  "bitcoin/block/bug/blk975/blk00975.dat";
    ifstream stream{path};

    vector<Block> blocks;
    while(stream.is_open() && !stream.eof()) {

        blocks.emplace_back(Block{});
        Block& block = blocks.back();
        block.decode(stream);
    }

    stream.close();
    EXPECT_EQ(blocks.size(), 137);

    string pathOut = pathMockRoot + "bitcoin/block/bug/blk975/blk00975.json";
    ofstream streamOut(pathOut);

    if(streamOut.is_open()){

        rapidjson::OStreamWrapper wrapper(streamOut);
        rapidjson::Writer<rapidjson::OStreamWrapper> writer (wrapper);

        writer.StartObject();
        writer.Key("blocks");
        writer.StartArray();
        for(Block b : blocks)
        {
          b.toJson(writer);
        }
        writer.EndArray();
        writer.EndObject();
      streamOut.close();
    }
}

//Test for the another file blk that generated exception
TEST(ExceptionGenerateCompactSizeTest, test_exception_compactsize_file_blk977)
{
    string pathMockRoot = ConfiguratorSingleton::getInstance().getPathFileMockTest() + "/";
    string pathLogRoot = ConfiguratorSingleton::getInstance().getPathFileLog() + "/";

    FLAGS_minloglevel = 2;
    FLAGS_logtostderr = false;
    google::SetLogDestination(google::GLOG_FATAL, pathLogRoot.append("test_exception_compactsize_file_blk977.log").c_str());

    string path = pathMockRoot +  "bitcoin/block/bug/blk977/blk00977.dat";
    ifstream stream{path};

    vector<Block> blocks;
    while(stream.is_open() && !stream.eof()) {

        blocks.emplace_back(Block{});
        Block& block = blocks.back();
        block.decode(stream);
    }

    stream.close();
    EXPECT_EQ(blocks.size(), 141);

    string pathOut = pathMockRoot + "bitcoin/block/bug/blk977/blk00977.json";
    ofstream streamOut(pathOut);

    if(streamOut.is_open()){

        rapidjson::OStreamWrapper wrapper(streamOut);
        rapidjson::Writer<rapidjson::OStreamWrapper> writer (wrapper);

        writer.StartObject();
        writer.Key("blocks");
        writer.StartArray();
        for(Block b : blocks)
        {
          b.toJson(writer);
        }
        writer.EndArray();
        writer.EndObject();
      streamOut.close();
    }

}

//Test for the another file blk that generated exception
TEST(ExceptionGenerateCompactSizeTest, test_exception_compactsize_file_blk1124)
{
    string pathMockRoot = ConfiguratorSingleton::getInstance().getPathFileMockTest() + "/";
    string pathLogRoot = ConfiguratorSingleton::getInstance().getPathFileLog() + "/";

    FLAGS_minloglevel = 2;
    FLAGS_logtostderr = false;
    google::SetLogDestination(google::GLOG_FATAL, pathMockRoot.append("test_exception_compactsize_file_blk1124.log").c_str());

    //string path = pathMockRoot + "bitcoin/block/bug/blk1124/blk01124.dat";
    //TODO find the bug inside the path
    string path = "/media/vincenzo/Maxtor/BitcoinCore/node/blocks/blk01124.dat";
    ifstream stream{path};
    vector<Block> blocks;
    while(stream.is_open() && !stream.eof())
    {

        blocks.emplace_back(Block{});
        Block& block = blocks.back();
        block.decode(stream);
    }

    stream.close();
    EXPECT_EQ(blocks.size(), 127);

    string pathOut = pathMockRoot + "bitcoin/block/bug/blk1124/blk01124.json";
    ofstream streamOut(pathOut);

    if(streamOut.is_open())
    {

        rapidjson::OStreamWrapper wrapper(streamOut);
        rapidjson::Writer<rapidjson::OStreamWrapper> writer (wrapper);
        writer.StartObject();

        writer.StartObject();
        writer.Key("blocks");
        writer.StartArray();
        for(Block b : blocks)
        {
          b.toJson(writer);
        }
        writer.EndArray();
        writer.EndObject();

        streamOut.close();
    }

}
